package pattern

import "fmt"

/*
Состояние - поведенческий паттерн. Позволяет объекту менять своё поведение в
зависимости от внутреннего состояния. Извне создаётся впечатление, что изменился
класс объекта.

Применяется, когда:
- поведение объекта зависит от его состояния и должно изменяться во время выполнения;
- в кода операций встречаются состоящие из многих ветвей условные операторы, в
которых выбор ветви зависит от состояниея. Паттерн предлагает поместить каждую ветвь
в отдельный класс и тракторвать состояние объекта как самостоятельный объекта,
котокрый может изменяться независимо от других.

Плюсы:
- избавляет от множества больших условных операторов машины состояний;
- концентрирует в одном месте код, связанный с определённым состоянием;
- упрощает код контекста;
Минусы:
- может неоправданно усложнить код, если состояний мало и они редко меняются;

Пример реального применения: состояние заказа на маркетплейсе (Ожидание оплаты,
Оплачен, Отменен); состояния персонажей в играх (Атака, Бег, Ходьба);
*/

type State interface {
	Display()
}

type Profile struct {
	state State
}

func (p *Profile) SetState(state State) {
	p.state = state
}

func (p *Profile) Visit() {
	p.state.Display()
}

type DeletedState struct{}

type BannedState struct{}

type ActiveState struct{}

func (s *DeletedState) Display() {
	fmt.Println("Profile deleted :(")
}

func (s *BannedState) Display() {
	fmt.Println("Profile banned :P")
}

func (s *ActiveState) Display() {
	fmt.Println("User profile ^.^")
}
