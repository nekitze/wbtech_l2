package pattern

/*
Посетитель - поведенческий паттерн, описывает операцию, выполняемую с
каждым объектом из некоторой структуры. Позволяет определить новую
операцию, не изменяя классы этих объектов.

Применяется, когда:
- в структуре присутствуют объекты многих классов с различными
  интерфейсами и нужно выполнятть над ними операции, зависящие
  от конерктных классов;
- над объектами, входящими в состав структуры, надо выполнять
  разнообразные, не связанные между собой операции и мы не хотим засорять
  классы такими операциями;
- классы, устанавливающие структуру объектов, изменяются редко, но
  новые операции над этой структурой добавляются часто;

Плюсы:
- добавление функциональности без изменения классов;
- простое разделение обязанностей посетителей;
Минусы:
- увеличение сложности системы при изменении посещаемых классов;
- аккумулирование состояния;
- нарушение инкапсуляции;
- сложно добавлять новые классы ConcreteElement;

Пример реального применения: алгоритмы анализа исходного текста программы
в компиляторе Smalltalk-80 (ProgramNodeEnumerator).
*/

type Visitor interface {
	VisitElementA(e *ElementA)
	VisitElementB(e *ElementB)
}

type Element interface {
	Accept(v *Visitor)
}

type ElementA struct{}

type ElementB struct{}

type CompositeElement struct {
	children []Element
}

func (c *CompositeElement) Accept(v *Visitor) {
	for _, child := range c.children {
		child.Accept(v)
	}
}
